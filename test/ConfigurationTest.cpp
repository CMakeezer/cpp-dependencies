#include "test.h"
#include "Constants.h"
#include "Configuration.h"
#include "FilesystemInclude.h"
#include "FstreamInclude.h"

TEST(NoConfigurationFile)
{
  const filesystem::path tempDir = filesystem::unique_path(filesystem::temp_directory_path() / "%%%%%-%%%%%");
  ASSERT(filesystem::create_directories(tempDir));
  const filesystem::path curDir = filesystem::current_path();
  filesystem::current_path(tempDir);

  Configuration config;
  ASSERT(config.companyName == "YourCompany");
  ASSERT(config.regenTag == "GENERATED BY CPP-DEPENDENCIES");
  ASSERT(config.versionUsed == CURRENT_VERSION);
  ASSERT(config.cycleColor == "orange");
  ASSERT(config.publicDepColor == "blue");
  ASSERT(config.privateDepColor == "lightblue");
  ASSERT(config.componentLinkLimit == 30);
  ASSERT(config.componentLocLowerLimit == 200);
  ASSERT(config.componentLocUpperLimit == 20000);
  ASSERT(config.fileLocUpperLimit == 2000);
  ASSERT(config.addLibraryAliases.size() == 1);
  ASSERT(config.addLibraryAliases.count("add_library") == 1);
  ASSERT(config.addExecutableAliases.size() == 1);
  ASSERT(config.addExecutableAliases.count("add_executable") == 1);

  filesystem::current_path(curDir);
}

TEST(ReadConfigurationFile)
{
  const filesystem::path tempDir = filesystem::unique_path(filesystem::temp_directory_path() / "%%%%%-%%%%%");
  ASSERT(filesystem::create_directories(tempDir));
  const filesystem::path curDir = filesystem::current_path();
  filesystem::current_path(tempDir);

  streams::ofstream out(CONFIG_FILE);
  out << "versionUsed: 3\n"
      << "companyName: MyCompany\n"
      << "regenTag: MY_REGEN_TAG\n"
      << "cycleColor: brown\n"
      << "publicDepColor: black\n"
      << "privateDepColor: grey\n"
      << "componentLinkLimit: 2\n"
      << "componentLocLowerLimit: 1\n"
      << "componentLocUpperLimit: 123\n"
      << "fileLocUpperLimit: 567\n";
  out.close();

  Configuration config;
  ASSERT(config.companyName == "MyCompany");
  ASSERT(config.regenTag == "MY_REGEN_TAG");
  ASSERT(config.versionUsed == "3");
  ASSERT(config.cycleColor == "brown");
  ASSERT(config.publicDepColor == "black");
  ASSERT(config.privateDepColor == "grey");
  ASSERT(config.componentLinkLimit == 2);
  ASSERT(config.componentLocLowerLimit == 1);
  ASSERT(config.componentLocUpperLimit == 123);
  ASSERT(config.fileLocUpperLimit == 567);
  ASSERT(config.addLibraryAliases.size() == 1);
  ASSERT(config.addLibraryAliases.count("add_library") == 1);
  ASSERT(config.addExecutableAliases.size() == 1);
  ASSERT(config.addExecutableAliases.count("add_executable") == 1);

  filesystem::current_path(curDir);
}

TEST(ReadConfigurationFile_Aliases)
{
  const filesystem::path tempDir = filesystem::unique_path(filesystem::temp_directory_path() / "%%%%%-%%%%%");
  ASSERT(filesystem::create_directories(tempDir));
  const filesystem::path curDir = filesystem::current_path();
  filesystem::current_path(tempDir);

  streams::ofstream out(CONFIG_FILE);
  out << "addLibraryAlias: add_special_library\n"
      << "addLibraryAlias: add_test_lib\n"
      << "addExecutableAlias: add_special_exe\n"
      << "addExecutableAlias: add_test\n";
  out.close();

  Configuration config;
  ASSERT(config.addLibraryAliases.size() == 3);
  ASSERT(config.addLibraryAliases.count("add_library") == 1);
  ASSERT(config.addLibraryAliases.count("add_special_library") == 1);
  ASSERT(config.addLibraryAliases.count("add_test_lib") == 1);

  ASSERT(config.addExecutableAliases.size() == 3);
  ASSERT(config.addExecutableAliases.count("add_executable") == 1);
  ASSERT(config.addExecutableAliases.count("add_special_exe") == 1);
  ASSERT(config.addExecutableAliases.count("add_test") == 1);

  filesystem::current_path(curDir);
}
